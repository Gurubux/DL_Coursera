PRACTICAL ASPECTS OF DEEP LEARNING
------------------------------------------------------------------------------------------------------------------------------------------------------------
1.1	Train / Dev / Test sets
Applied ML is an iterative process 
- No. of layers 
- No. of hidden units
- Learning rates
- Activation functions
No easy to guess these hyper parameters from the start, try and figure out(iterative Process)
So data division is important, Training Set / Hold Out CV Set-Dev set / Test set
Earlier or for small number of examples : 100, 1000 or 10,000 having 70/30 or 60/20/20 % was fine.
But, For 1000,000 examples we use 98/1/1 % or 99/0.5/0.5 or rather 99.5/0.4/0.1 that is 10,000 exaples For dev and test sets each is fine.

- Also not having Test set is fine(only dev set)

- It is important to have Dev and test set from same distributions - From web or From users

------------------------------------------------------------------------------------------------------------------------------------------------------------
1.2	Bias / Variance




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.3	Basic Recipe for Machine Learning

Bigger network can reduce Bias and More data can reduce variance and thus there is no trade-off i.e each can be solved with hurting the other, in deep learning, because of the availability of data in Big Data Era. 


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.4	Regularization

L2 Norm in LR
										  
1/m *  np.sum( L(ŷᶦ , yᶦ) ) + λ/2m * ||w||²
	where,
		   			 ₙₓ								
	||w||² = np.sum( wⱼ² )	= w ᵀ w								 
	  			ʲ⁼¹



L2 Norm in NN is also called "Frobenius Norm"
	/------------------------------------------------------------
   /										  L                 /
  / 1/m *  np.sum( L(ŷᶦ , yᶦ) ) + λ/2m *  np.sum( ||w[ˡ]||² )  /
 /										 ˡ⁼¹                  /
/------------------------------------------------------------/
Where,
	  L                    ₙ[L₋₁]   ₙ[L]
  np.sum( ||w[ˡ]||² )  =  np.sum( np.sum(  wᵢⱼ[ᴸ] )²
     ˡ⁼¹                    ᶦ⁼¹    ʲ⁼¹




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.5	Why regularization reduces overfitting?
1. intuition
	λ ↑  W ↓  i.e. W ≈ 0
	Therefore, overfitting (high variance) is moved towards generalization (low variance)
	and thus, a very large λ can cause W ≈ 0 and thus might underfit (high bias)
	So find intermdiate λ

2. intuition
	Z[l] = W[l] a[l-1] + b[l]

	Thus if λ ↑  W[l] ↓  then Z[l] also ↓
	And consider a tanh() activation function, For small range of z the funciton is Linear, thiis less complex is the DNN, this less overfitting


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.6	Dropout Regularization




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.7	Understanding Dropout

Eliminates some units From each layer making complex layers more simpler


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.8	Other regularization methods

Data Augmentation
Early Stopping


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.9	Normalizing inputs

Subtract the mean
divide by the variance-(Normalize the variance)

X = ( X - μ )/ σ²

------------------------------------------------------------------------------------------------------------------------------------------------------------
1.10 Vanishing / Exploding gradients




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.11 Weight Initialization For Deep Networks

Usual practice
 W1 = np.random.randn(n_h,n_x)*0.01

Normalize the weights Initialization

W1 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[0])
W2 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[1])

or

W1 = np.random.randn(n_h,n_x) *  np.sqrt( 1 / n[0])
W2 = np.random.randn(n_h,n_x) *  np.sqrt( 1 / n[1])

or

W1 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[0] + n[1])
W2 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[1] + n[2] )

------------------------------------------------------------------------------------------------------------------------------------------------------------
1.12 Numerical approximation of gradients




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.13 Gradient checking




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.14 Gradient Checking Implementation Notes




------------------------------------------------------------------------------------------------------------------------------------------------------------
*********************************************************************************************
NOTEBOOK: INITIALIZATION
\1 - Neural Network model
You will use a 3-layer neural network (already implemented for you). Here are the initialization methods you will experiment with:

Zeros initialization -- setting initialization = "zeros" in the input argument.
Random initialization -- setting initialization = "random" in the input argument. This initializes the weights to large random values.
He initialization -- setting initialization = "he" in the input argument. This initializes the weights to random values scaled according to a paper by He 

def model(X, Y, learning_rate = 0.01, num_iterations = 15000, print_cost = True, initialization = "he"):
    """
    Implements a three-layer neural network: LINEAR->RELU->LINEAR->RELU->LINEAR->SIGMOID.
    
    Arguments:
    X -- input data, of shape (2, number of examples)
    Y -- true "label" vector (containing 0 for red dots; 1 for blue dots), of shape (1, number of examples)
    learning_rate -- learning rate for gradient descent 
    num_iterations -- number of iterations to run gradient descent
    print_cost -- if True, print the cost every 1000 iterations
    initialization -- flag to choose which initialization to use ("zeros","random" or "he")
    
    Returns:
    parameters -- parameters learnt by the model
    """
        
    grads = {}
    costs = [] # to keep track of the loss
    m = X.shape[1] # number of examples
    layers_dims = [X.shape[0], 10, 5, 1]
    
    # Initialize parameters dictionary.
    if initialization == "zeros":
        parameters = initialize_parameters_zeros(layers_dims)
    elif initialization == "random":
        parameters = initialize_parameters_random(layers_dims)
    elif initialization == "he":
        parameters = initialize_parameters_he(layers_dims)

    # Loop (gradient descent)

    for i in range(0, num_iterations):

        # Forward propagation: LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SIGMOID.
        a3, cache = forward_propagation(X, parameters)
        
        # Loss
        cost = compute_loss(a3, Y)

        # Backward propagation.
        grads = backward_propagation(X, Y, cache)
        
        # Update parameters.
        parameters = update_parameters(parameters, grads, learning_rate)
        
        # Print the loss every 1000 iterations
        if print_cost and i % 1000 == 0:
            print("Cost after iteration {}: {}".format(i, cost))
            costs.append(cost)
            
    # plot the loss
    plt.plot(costs)
    plt.ylabel('cost')
    plt.xlabel('iterations (per hundreds)')
    plt.title("Learning rate =" + str(learning_rate))
    plt.show()
    
    return parameters
------------------------------------------------------------------------------------------------
\2 - Zero initialization
\3 - Random initialization
\4 - He initialization
------------------------------------------------------------------------------------------------
\2 - Zero initialization
"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Model_with_Zero_Initialization.png"
"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Model_with_Zero_Initialization_cost.png"

There are two types of parameters to initialize in a neural network:
	the weight matrices  (W[1],W[2],W[3],...,W[L−1],W[L])
	the bias vectors  (b[1],b[2],b[3],...,b[L−1],b[L])
Exercise: Implement the following function to initialize all parameters to zeros. You`ll see later that this does not work well since it fails to "break symmetry", but lets try it anyway and see what happens. Use np.zeros((..,..)) with the correct shapes.


# GRADED FUNCTION: initialize_parameters_zeros 

def initialize_parameters_zeros(layers_dims):
    """
    Arguments:
    layer_dims -- python array (list) containing the size of each layer.
    
    Returns:
    parameters -- python dictionary containing your parameters "W1", "b1", ..., "WL", "bL":
                    W1 -- weight matrix of shape (layers_dims[1], layers_dims[0])
                    b1 -- bias vector of shape (layers_dims[1], 1)
                    ...
                    WL -- weight matrix of shape (layers_dims[L], layers_dims[L-1])
                    bL -- bias vector of shape (layers_dims[L], 1)
    """
    
    parameters = {}
    L = len(layers_dims)            # number of layers in the network
    
    for l in range(1, L):
        ### START CODE HERE ### (≈ 2 lines of code)
        parameters['W' + str(l)] = np.zeros((layers_dims[l],layers_dims[l-1]))
        parameters['b' + str(l)] = np.zeros((layers_dims[l],1))
        ### END CODE HERE ###
    return parameters
parameters = initialize_parameters_zeros([3,2,1])
print("W1 = " + str(parameters["W1"]))
print("b1 = " + str(parameters["b1"]))
print("W2 = " + str(parameters["W2"]))
print("b2 = " + str(parameters["b2"]))
W1 = [[ 0.  0.  0.]
 [ 0.  0.  0.]]
b1 = [[ 0.]
 [ 0.]]
W2 = [[ 0.  0.]]
b2 = [[ 0.]]


parameters = model(train_X, train_Y, initialization = "zeros")
print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)
>>>
Cost after iteration 0: 0.6931471805599453
Cost after iteration 1000: 0.6931471805599453
Cost after iteration 2000: 0.6931471805599453
Cost after iteration 3000: 0.6931471805599453
Cost after iteration 4000: 0.6931471805599453
Cost after iteration 5000: 0.6931471805599453
Cost after iteration 6000: 0.6931471805599453
Cost after iteration 7000: 0.6931471805599453
Cost after iteration 8000: 0.6931471805599453
Cost after iteration 9000: 0.6931471805599453
Cost after iteration 10000: 0.6931471805599455
Cost after iteration 11000: 0.6931471805599453
Cost after iteration 12000: 0.6931471805599453
Cost after iteration 13000: 0.6931471805599453
Cost after iteration 14000: 0.6931471805599453
>>>
On the train set:
Accuracy: 0.5
On the test set:
Accuracy: 0.5


print ("predictions_train = " + str(predictions_train))
print ("predictions_test = " + str(predictions_test))
>>>
predictions_train = [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0]]
predictions_test = [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]


plt.title("Model with Zeros initialization")
axes = plt.gca()
axes.set_xlim([-1.5,1.5])
axes.set_ylim([-1.5,1.5])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)



The model is predicting 0 for every example.

"In general, initializing all the weights to zero results in the network failing to "BREAK SYMMETRY". This means that every neuron in each layer will learn the same thing, and you might as well be training a neural network with n[l]=1 for every layer, and the network is no more powerful than a linear classifier such as logistic regression."
@What you should remember:
	- The weights  W[l]  should be initialized randomly to break symmetry.
	- It is however okay to initialize the biases  b[l]  to zeros. Symmetry is still broken so long as  W[l] is initialized randomly.  
------------------------------------------------------------------------------------------------
\3 - Random INITIALIZATION
"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Model_with_Random_Large_Initialization.png"
"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Model_with_Random_Large_Initialization_cost.png"

To break symmetry, lets intialize the weights randomly. Following random initialization, each neuron can then proceed to learn a different function of its inputs. In this exercise, you will see what happens if the weights are intialized randomly, but to very large values.

Exercise: Implement the following function to initialize your weights to large random values (scaled by *10) and your biases to zeros. Use np.random.randn(..,..) * 10 for weights and np.zeros((.., ..)) for biases. We are using a fixed np.random.seed(..) to make sure your "random" weights match ours, so don't worry if running several times your code gives you always the same initial values for the parameters.

# GRADED FUNCTION: initialize_parameters_random

def initialize_parameters_random(layers_dims):
    """
    Arguments:
    layer_dims -- python array (list) containing the size of each layer.
    
    Returns:
    parameters -- python dictionary containing your parameters "W1", "b1", ..., "WL", "bL":
                    W1 -- weight matrix of shape (layers_dims[1], layers_dims[0])
                    b1 -- bias vector of shape (layers_dims[1], 1)
                    ...
                    WL -- weight matrix of shape (layers_dims[L], layers_dims[L-1])
                    bL -- bias vector of shape (layers_dims[L], 1)
    """
    
    np.random.seed(3)               # This seed makes sure your "random" numbers will be the as ours
    parameters = {}
    L = len(layers_dims)            # integer representing the number of layers
    
    for l in range(1, L):
        ### START CODE HERE ### (≈ 2 lines of code)
        parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1]) * 10
        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))
        ### END CODE HERE ###

    return parameters

parameters = initialize_parameters_random([3, 2, 1])
print("W1 = " + str(parameters["W1"]))
print("b1 = " + str(parameters["b1"]))
print("W2 = " + str(parameters["W2"]))
print("b2 = " + str(parameters["b2"]))

parameters = model(train_X, train_Y, initialization = "random")
print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)
>>>
Cost after iteration 0: inf
Cost after iteration 1000: 0.6242434241539614
Cost after iteration 2000: 0.5978811277755388
Cost after iteration 3000: 0.5636242569764779
Cost after iteration 4000: 0.5500958254523324
Cost after iteration 5000: 0.544339206192789
Cost after iteration 6000: 0.5373584514307651
Cost after iteration 7000: 0.469574666760224
Cost after iteration 8000: 0.39766324943219844
Cost after iteration 9000: 0.3934423376823982
Cost after iteration 10000: 0.3920158992175907
Cost after iteration 11000: 0.38913979237487845
Cost after iteration 12000: 0.3861261344766218
Cost after iteration 13000: 0.3849694511273874
Cost after iteration 14000: 0.3827489017191917
>>>
On the train set:
Accuracy: 0.83
On the test set:
Accuracy: 0.86

If you see "inf" as the cost after the iteration 0, this is because of numerical roundoff; a more numerically sophisticated implementation would fix this. But this isn`t worth worrying about for our purposes.
Anyway, it looks like you have broken symmetry, and this gives better results. than before. The model is no longer outputting all 0s.

print (predictions_train)
print (predictions_test)

plt.title("Model with large random initialization")
axes = plt.gca()
axes.set_xlim([-1.5,1.5])
axes.set_ylim([-1.5,1.5])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)


OBSERVATIONS:
The cost starts very high. This is because with large random-valued weights, the last activation (sigmoid) outputs results that are very close to 0 or 1 for some examples, and when it gets that example wrong it incurs a very high loss for that example. Indeed, when  
		log(a[3])=log(0) , the loss goes to infinity.

Poor initialization can lead to "VANISHING/EXPLODING GRADIENTS", which also slows down the optimization algorithm.
If you train this network longer you will see better results, but initializing with overly large random numbers slows down the optimization.

@IN SUMMARY:
	- Initializing weights to very large random values does not work well.
	- Hopefully intializing with small random values does better. The important question is: how small should be these random values be? Lets find out in the next part!

------------------------------------------------------------------------------------------------
\4 - He INITIALIZATION
"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Model_with_HE_Large_Initialization.png"
"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Model_with_HE_Large_Initialization_cost.png"

Finally, Try "He Initialization"; this is named For the first author of He et al., 2015. (If you have heard of "Xavier initialization", this is similar except Xavier initialization uses a scaling factor For the weights  W[l]  of 
	sqrt(1./layers_dims[l-1]) 
	where He initialization would use sqrt(2./layers_dims[l-1])

EXERCISE: Implement the following function to initialize your parameters with He initialization.

HINT: This function is similar to the previous initialize_parameters_random(...). The only difference is that instead of multiplying np.random.randn(..,..) by 10, you will multiply it by √ 2/dimension of the previous layer  , which is what He initialization recommends for layers with a ReLU activation.

# GRADED FUNCTION: initialize_parameters_he

def initialize_parameters_he(layers_dims):
    """
    Arguments:
    layer_dims -- python array (list) containing the size of each layer.
    
    Returns:
    parameters -- python dictionary containing your parameters "W1", "b1", ..., "WL", "bL":
                    W1 -- weight matrix of shape (layers_dims[1], layers_dims[0])
                    b1 -- bias vector of shape (layers_dims[1], 1)
                    ...
                    WL -- weight matrix of shape (layers_dims[L], layers_dims[L-1])
                    bL -- bias vector of shape (layers_dims[L], 1)
    """
    
    np.random.seed(3)
    parameters = {}
    L = len(layers_dims) - 1 # integer representing the number of layers
     
    for l in range(1, L + 1):
        ### START CODE HERE ### (≈ 2 lines of code)
        parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1]) * np.sqrt(2/layers_dims[l-1])
        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))
        ### END CODE HERE ###
        
    return parameters

parameters = initialize_parameters_he([2, 4, 1])
print("W1 = " + str(parameters["W1"]))
print("b1 = " + str(parameters["b1"]))
print("W2 = " + str(parameters["W2"]))
print("b2 = " + str(parameters["b2"]))

parameters = model(train_X, train_Y, initialization = "he")
print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)
>>>
Cost after iteration 0: 0.8830537463419761
Cost after iteration 1000: 0.6879825919728063
Cost after iteration 2000: 0.6751286264523371
Cost after iteration 3000: 0.6526117768893807
Cost after iteration 4000: 0.6082958970572938
Cost after iteration 5000: 0.5304944491717495
Cost after iteration 6000: 0.4138645817071794
Cost after iteration 7000: 0.3117803464844441
Cost after iteration 8000: 0.23696215330322562
Cost after iteration 9000: 0.18597287209206834
Cost after iteration 10000: 0.15015556280371806
Cost after iteration 11000: 0.12325079292273546
Cost after iteration 12000: 0.09917746546525934
Cost after iteration 13000: 0.08457055954024278
Cost after iteration 14000: 0.07357895962677369

>>>
On the train set:
Accuracy: 0.993333333333
On the test set:
Accuracy: 0.96

plt.title("Model with He initialization")
axes = plt.gca()
axes.set_xlim([-1.5,1.5])
axes.set_ylim([-1.5,1.5])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)

Observations:

The model with He initialization separates the blue and the red dots very well in a small number of iterations.


\5 - Conclusions
You have seen three different types of initializations. For the same number of iterations and same hyperparameters the comparison is:

Model											Train accuracy		Problem/Comment
3-layer NN with "zeros" initialization			50%					fails to break symmetry
3-layer NN with large "random" initialization	83%					too large weights
3-layer NN with "He" initialization				99%					recommended method


@What you should remember from this notebook:
	- Different initializations lead to different results
	- Random initialization is used to break symmetry and make sure different hidden units can learn different things
	- Don`t intialize to values that are too large
	- "He" initialization works well For networks with ReLU activations.



*********************************************************************************************
NOTEBOOK: REGULARIZATION
By completing this assignment you will:
- Understand that different regularization methods that could help your model.
- Implement dropout and see it work on data.
- Recognize that a model without regularization gives you a better accuracy on the training set but nor necessarily on the test set.
- Understand that you could use both dropout and regularization on your model.
"https://raw.githubusercontent.com/Gurubux/DL_Coursera/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Regularization_Effect.png"
Regularization
Welcome to the second assignment of this week. Deep Learning models have so much flexibility and capacity that overfitting can be a serious problem, if the training dataset is not big enough. Sure it does well on the training set, but the learned network doesn`t generalize to new examples that it has never seen!

You will learn to: "Use regularization in your deep learning models."

Problem Statement: You have just been hired as an AI expert by the French Football Corporation. They would like you to recommend positions where France`s goal keeper should kick the ball so that the French team`s players can then hit it with their head.
"https://raw.githubusercontent.com/Gurubux/DL_Coursera/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Reg_Problem_statement.png"

The goal keeper kicks the ball in the air, the players of each team are fighting to hit the ball with their head
They give you the following 2D dataset from France`s past 10 games.
train_X, train_Y, test_X, test_Y = load_2D_dataset()
"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Reg_Problem_statement_Data.png"
Each dot corresponds to a position on the football field where a football player has hit the ball With his/her head after the French goal keeper has shot the ball From the left side of the football field.


If the dot is blue, it means the French player managed to hit the ball with his/her head.
If the dot is red, it means the other team`s player hit the ball with their head.

"Your goal": Use a deep learning model to find the positions on the field where the goalkeeper should kick the ball.

"Analysis of the dataset": This dataset is a little noisy, but it looks like a diagonal line separating the upper left half (blue) from the lower right half (red) would work well.

You will first try a non-regularized model. Then you`ll learn how to regularize it and decide which model you will choose to solve the French Football Corporation`s problem.




\1 - Non-regularized model
\2 - L2 Regularization
\3 - Dropout
	\3.1 - Forward propagation with dropout
	\3.2 - Backward propagation with dropout

------------------------------------------------------------------------------------------------
\1 - Non-regularized model

You will use the following neural network (already implemented for you below). This model can be used:
in regularization mode 	-- by setting the lambd input to a non-zero value. We use "lambd" instead of "lambda" because "lambda" is a reserved keyword in Python.
in dropout mode 		-- by setting the 'keep_prob' to a value less than one

You will first try the model without any regularization. Then, you will implement:
	L2 regularization 	-- functions: "compute_cost_with_regularization()" and "backward_propagation_with_regularization()"
	Dropout 			-- functions: "forward_propagation_with_dropout()" and "backward_propagation_with_dropout()"

In each part, you will run this model with the correct inputs so that it calls the functions you`ve implemented. Take a look at the code below to familiarize yourself with the model.

def model(X, Y, learning_rate = 0.3, num_iterations = 30000, print_cost = True, lambd = 0, 'keep_prob' = 1):
    """
    Implements a three-layer neural network: LINEAR->RELU->LINEAR->RELU->LINEAR->SIGMOID.
    
    Arguments:
    X -- input data, of shape (input size, number of examples)
    Y -- true "label" vector (1 for blue dot / 0 for red dot), of shape (output size, number of examples)
    learning_rate -- learning rate of the optimization
    num_iterations -- number of iterations of the optimization loop
    print_cost -- If True, print the cost every 10000 iterations
    lambd -- regularization hyperparameter, scalar
    'keep_prob' - probability of keeping a neuron active during drop-out, scalar.
    
    Returns:
    parameters -- parameters learned by the model. They can then be used to predict.
    """
        
    grads = {}
    costs = []                            # to keep track of the cost
    m = X.shape[1]                        # number of examples
    layers_dims = [X.shape[0], 20, 3, 1]
    
    # Initialize parameters dictionary.
    parameters = initialize_parameters(layers_dims)

    # Loop (gradient descent)

    for i in range(0, num_iterations):

        # Forward propagation: LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SIGMOID.
        if 'keep_prob' == 1:
            a3, cache = forward_propagation(X, parameters)
        elif 'keep_prob' < 1:
            a3, cache = forward_propagation_with_dropout(X, parameters, 'keep_prob')
        
        # Cost function
        if lambd == 0:
            cost = compute_cost(a3, Y)
        else:
            cost = compute_cost_with_regularization(a3, Y, parameters, lambd)
            
        # Backward propagation.
        assert(lambd==0 or 'keep_prob'==1)    # it is possible to use both L2 regularization and dropout, 
                                            # but this assignment will only explore one at a time
        if lambd == 0 and 'keep_prob' == 1:
            grads = backward_propagation(X, Y, cache)
        elif lambd != 0:
            grads = backward_propagation_with_regularization(X, Y, cache, lambd)
        elif 'keep_prob' < 1:
            grads = backward_propagation_with_dropout(X, Y, cache, 'keep_prob')
        
        # Update parameters.
        parameters = update_parameters(parameters, grads, learning_rate)
        
        # Print the loss every 10000 iterations
        if print_cost and i % 10000 == 0:
            print("Cost after iteration {}: {}".format(i, cost))
        if print_cost and i % 1000 == 0:
            costs.append(cost)
    
    # plot the cost
    plt.plot(costs)
    plt.ylabel('cost')
    plt.xlabel('iterations (x1,000)')
    plt.title("Learning rate =" + str(learning_rate))
    plt.show()
    
    return parameters
parameters = model(train_X, train_Y)
print ("On the training set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)

Cost after iteration 0: 0.6557412523481002
Cost after iteration 10000: 0.16329987525724213
Cost after iteration 20000: 0.13851642423253263
>>>
On the training set:
Accuracy: 0.947867298578
On the test set:
Accuracy: 0.915
The train accuracy is 94.8% while the test accuracy is 91.5%. This is the baseline model (you will observe the impact of regularization on this model). Run the following code to plot the decision boundary of your model.

plt.title("Model without regularization")
axes = plt.gca()
axes.set_xlim([-0.75,0.40])
axes.set_ylim([-0.75,0.65])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)



------------------------------------------------------------------------------------------------
\2 - L2 Regularization
The standard way to avoid overfitting is called L2 regularization. It consists of appropriately modifying your cost function, from:
		J
TO

  		J 			 +  λ/2m  ∑ ∑ ∑	W[ˡ]²
						 	  ˡ ᵏ ʲ  ᵏ,ʲ 					....(2)
(cross-entropy cost) + (L2 regularization cost)

Let`s modify your cost and observe the consequences.

Exercise: Implement compute_cost_with_regularization() which computes the cost given by formula (2). To calculate   ∑ ∑	Wˡ ² , use :
																													ᵏ ʲ	 ᵏ,ʲ			
np.sum(np.square(Wl))
Note that you have to do this for  W[1],  W[2] and  W[3] , then sum the three terms and multiply by  1/m λ/2


# GRADED FUNCTION: compute_cost_with_regularization

def compute_cost_with_regularization(A3, Y, parameters, lambd):
    """
    Implement the cost function with L2 regularization. See formula (2) above.
    
    Arguments:
    A3 -- post-activation, output of forward propagation, of shape (output size, number of examples)
    Y -- "true" labels vector, of shape (output size, number of examples)
    parameters -- python dictionary containing parameters of the model
    
    Returns:
    cost - value of the regularized loss function (formula (2))
    """
    m = Y.shape[1]
    W1 = parameters["W1"]
    W2 = parameters["W2"]
    W3 = parameters["W3"]
    
    cross_entropy_cost = compute_cost(A3, Y) # This gives you the cross-entropy part of the cost
    
    ### START CODE HERE ### (approx. 1 line)
    L2_regularization_cost = (np.sum(np.square(W1)) + np.sum(np.square(W2)) + np.sum(np.square(W3))) * 1/m * lambd/2
    ### END CODER HERE ###
    
    cost = cross_entropy_cost + L2_regularization_cost
    
    return cost

A3, Y_assess, parameters = compute_cost_with_regularization_test_case()
print("cost = " + str(compute_cost_with_regularization(A3, Y_assess, parameters, lambd = 0.1)))
>>>cost = 1.78648594516



Of course, because you changed the cost, you have to change backward propagation as well! All the gradients have to be computed with respect to this new cost.

Exercise: Implement the changes needed in backward propagation to take into account regularization. The changes only concern dW1, dW2 and dW3. For each, you have to add the regularization term`s gradient ( d/dW (1/2 λ/m W²) = λ/m W.

# GRADED FUNCTION: backward_propagation_with_regularization

def backward_propagation_with_regularization(X, Y, cache, lambd):
    """
    Implements the backward propagation of our baseline model to which we added an L2 regularization.
    
    Arguments:
    X -- input dataset, of shape (input size, number of examples)
    Y -- "true" labels vector, of shape (output size, number of examples)
    cache -- cache output from forward_propagation()
    lambd -- regularization hyperparameter, scalar
    
    Returns:
    gradients -- A dictionary with the gradients with respect to each parameter, activation and pre-activation variables
    """
    
    m = X.shape[1]
    (Z1, A1, W1, b1, Z2, A2, W2, b2, Z3, A3, W3, b3) = cache
    
    dZ3 = A3 - Y
    
    ### START CODE HERE ### (approx. 1 line)
    dW3 = 1./m * np.dot(dZ3, A2.T) + (lambd/m * W3)
    ### END CODE HERE ###
    db3 = 1./m * np.sum(dZ3, axis=1, keepdims = True)
    
    dA2 = np.dot(W3.T, dZ3)
    dZ2 = np.multiply(dA2, np.int64(A2 > 0))
    ### START CODE HERE ### (approx. 1 line)
    dW2 = 1./m * np.dot(dZ2, A1.T) + (lambd/m * W2)
    ### END CODE HERE ###
    db2 = 1./m * np.sum(dZ2, axis=1, keepdims = True)
    
    dA1 = np.dot(W2.T, dZ2)
    dZ1 = np.multiply(dA1, np.int64(A1 > 0))
    ### START CODE HERE ### (approx. 1 line)
    dW1 = 1./m * np.dot(dZ1, X.T) + (lambd/m * W1)
    ### END CODE HERE ###
    db1 = 1./m * np.sum(dZ1, axis=1, keepdims = True)
    
    gradients = {"dZ3": dZ3, "dW3": dW3, "db3": db3,"dA2": dA2,
                 "dZ2": dZ2, "dW2": dW2, "db2": db2, "dA1": dA1, 
                 "dZ1": dZ1, "dW1": dW1, "db1": db1}
    
    return gradients
X_assess, Y_assess, cache = backward_propagation_with_regularization_test_case()

grads = backward_propagation_with_regularization(X_assess, Y_assess, cache, lambd = 0.7)
print ("dW1 = "+ str(grads["dW1"]))
print ("dW2 = "+ str(grads["dW2"]))
print ("dW3 = "+ str(grads["dW3"]))
>>>
dW1 = [[-0.25604646  0.12298827 -0.28297129]
 	   [-0.17706303  0.34536094 -0.4410571 ]]
dW2 = [[ 0.79276486  0.85133918]
 	   [-0.0957219  -0.01720463]
 	   [-0.13100772 -0.03750433]]
dW3 = [[-1.77691347 -0.11832879 -0.09397446]]



Let`s now run the model with L2 regularization  (λ=0.7). The model() function will call:

compute_cost_with_regularization() instead of compute_cost()
backward_propagation_with_regularization() instead of backward_propagation()


parameters = model(train_X, train_Y, lambd = 0.7)
print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)

On the train set:
Accuracy: 0.938388625592
On the test set:
Accuracy: 0.93



Observations:
	- The value of  λλ  is a hyperparameter that you can tune using a dev set.
	- L2 regularization makes your decision boundary smoother. If  λλ  is too large, it is also possible to "oversmooth", resulting in a model with high bias.

"WHAT IS L2-REGULARIZATION ACTUALLY DOING?:"
\L2-regularization relies on the assumption that a model With small weights is simpler than a model With large weights. Thus, by penalizing the square values of the weights in the cost function you drive all the weights to smaller values. It becomes too costly For the cost to have large weights! This leads to a smoother model in which the output changes more slowly as the input changes.

"What you should remember -- the implications of L2-regularization on:"

	The cost computation:
		- A regularization term is added to the cost
	The backpropagation function:
		- There are extra terms in the gradients with respect to weight matrices
	Weights end up smaller ("weight decay"):
		- Weights are pushed to smaller values.



------------------------------------------------------------------------------------------------
\3 - Dropout
Finally, dropout is a widely used regularization technique that is specific to deep learning. "It randomly shuts down some neurons in each iteration". Watch these two videos to see what this means!

"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Dropout/dropout1_kiank.mp4"
Figure 2 : Drop-out on the second hidden layer. 
At each iteration, you shut down (= set to zero) each neuron of a layer with probability  1−'keep_prob'1−'keep_prob'  or keep it with probability  'keep_prob''keep_prob'  (50% here). The dropped neurons don`t contribute to the training in both the forward and backward propagations of the iteration.




"https://github.com/Gurubux/DL_Coursera/blob/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Dropout/dropout2_kiank.mp4"
Figure 3 : Drop-out on the first and third hidden layers. 
1st layer: we shut down on average 40% of the neurons.  3rd layer: we shut down on average 20% of the neurons.
When you shut some neurons down, you actually modify your model. The idea behind drop-out is that at each iteration, you train a different model that uses only a subset of your neurons. With dropout, your neurons thus become less sensitive to the activation of one other specific neuron, because that other neuron might be shut down at any time.


------------------------------------------------------------------------------------------------
	\3.1 - Forward propagation with dropout

Exercise: Implement the forward propagation with dropout. You are using a 3 layer neural network, and will add dropout to the first and second hidden layers. We will not apply dropout to the input layer or output layer.

Instructions: You would like to shut down some neurons in the first and second layers. To do that, you are going to carry out 4 Steps:

1. In lecture, we dicussed creating a variable  d[1]  with the same shape as  a[1]  using np.random.rand() to randomly get numbers between 0 and 1. Here, you will use a vectorized implementation, so create a random matrix  D[1]=[d[1]⁽¹⁾d[1]⁽²⁾...d[1]⁽ᵐ⁾]  of the same dimension as  A[1] .

2. Set each entry of  D[1] to be 0 with probability (1-'keep_prob') or 1 with probability ('keep_prob'), by thresholding values in  D[1]  appropriately. 
	Hint: to set all the entries of a matrix X to 0 (if entry is less than 0.5) or 1 (if entry is more than 0.5) you would do: X = (X > 0.5). 
	Note that 0 and 1 are respectively equivalent to False and True.

3. Set  A[1]  to  A[1]∗D[1] . (You are shutting down some neurons). You can think of  D[1]  as a mask, so that when it is multiplied with another matrix, it shuts down some of the values.

4. Divide  A[1]  by 'keep_prob'. By doing this you are assuring that the result of the cost will still have the same expected value as without drop-out. (This technique is also called inverted dropout.)

D1 = np.random.rand(A1.shape)                     # Step 1: initialize matrix D1 = np.random.rand(..., ...)
D1 = D1 > keep_prob                               # Step 2: convert entries of D1 to 0 or 1 (using keep_prob as the threshold)
A1 = A1 * D1                                      # Step 3: shut down some neurons of A1
A1 = A1/keep_prob     


# GRADED FUNCTION: forward_propagation_with_dropout

def forward_propagation_with_dropout(X, parameters, keep_prob = 0.5):
    """
    Implements the forward propagation: LINEAR -> RELU + DROPOUT -> LINEAR -> RELU + DROPOUT -> LINEAR -> SIGMOID.
    
    Arguments:
    X -- input dataset, of shape (2, number of examples)
    parameters -- python dictionary containing your parameters "W1", "b1", "W2", "b2", "W3", "b3":
                    W1 -- weight matrix of shape (20, 2)
                    b1 -- bias vector of shape (20, 1)
                    W2 -- weight matrix of shape (3, 20)
                    b2 -- bias vector of shape (3, 1)
                    W3 -- weight matrix of shape (1, 3)
                    b3 -- bias vector of shape (1, 1)
    keep_prob - probability of keeping a neuron active during drop-out, scalar
    
    Returns:
    A3 -- last activation value, output of the forward propagation, of shape (1,1)
    cache -- tuple, information stored for computing the backward propagation
    """
    
    np.random.seed(1)
    
    # retrieve parameters
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]
    W3 = parameters["W3"]
    b3 = parameters["b3"]
    
    # LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SIGMOID
    Z1 = np.dot(W1, X) + b1
    A1 = relu(Z1)
    ### START CODE HERE ### (approx. 4 lines)         # Steps 1-4 below correspond to the Steps 1-4 described above. 
    D1 = np.random.rand(A1.shape[0],A1.shape[1])      # Step 1: initialize matrix D1 = np.random.rand(..., ...)
    D1 = (D1 < keep_prob )                              # Step 2: convert entries of D1 to 0 or 1 (using keep_prob as the threshold)
    A1 = A1 * D1                                      # Step 3: shut down some neurons of A1
    A1 = A1/keep_prob                                 # Step 4: scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    Z2 = np.dot(W2, A1) + b2
    A2 = relu(Z2)
    ### START CODE HERE ### (approx. 4 lines)
    D2 =  np.random.rand(A2.shape[0],A2.shape[1])          # Step 1: initialize matrix D2 = np.random.rand(..., ...)
    D2 = (D2 < keep_prob)                                    # Step 2: convert entries of D2 to 0 or 1 (using keep_prob as the threshold)
    A2 = A2 * D2                                           # Step 3: shut down some neurons of A2
    A2 = A2/keep_prob                                      # Step 4: scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    Z3 = np.dot(W3, A2) + b3
    A3 = sigmoid(Z3)
    
    cache = (Z1, D1, A1, W1, b1, Z2, D2, A2, W2, b2, Z3, A3, W3, b3)
    
    return A3, cache
X_assess, parameters = forward_propagation_with_dropout_test_case()
A3, cache = forward_propagation_with_dropout(X_assess, parameters, keep_prob = 0.7)
print ("A3 = " + str(A3))

A3 = [[ 0.36974721  0.00305176  0.04565099  0.49683389  0.36974721]]

------------------------------------------------------------------------------------------------
	\3.2 - Backward propagation with dropoutzz
3.2 - Backward propagation with dropout
Exercise: Implement the backward propagation with dropout. As before, you are training a 3 layer network. Add dropout to the first and second hidden layers, using the masks  D[1] and  D[2] stored in the cache.

Instruction: Backpropagation with dropout is actually quite easy. You will have to carry out 2 Steps:
1. You had previously shut down some neurons during forward propagation, by applying a mask  D[1]  to A1. In backpropagation, you will have to shut down the same neurons, by reapplying the same mask  D[1]  to dA1.
2. During forward propagation, you had divided A1 by 'keep_prob'. In backpropagation, you`ll therefore have to divide dA1 by 'keep_prob' again (the calculus interpretation is that if  A[1] is scaled by 'keep_prob', then its derivative  dA[1]  is also scaled by the same 'keep_prob').

# GRADED FUNCTION: backward_propagation_with_dropout

def backward_propagation_with_dropout(X, Y, cache, keep_prob):
    """
    Implements the backward propagation of our baseline model to which we added dropout.
    
    Arguments:
    X -- input dataset, of shape (2, number of examples)
    Y -- "true" labels vector, of shape (output size, number of examples)
    cache -- cache output from forward_propagation_with_dropout()
    keep_prob - probability of keeping a neuron active during drop-out, scalar
    
    Returns:
    gradients -- A dictionary with the gradients with respect to each parameter, activation and pre-activation variables
    """
    
    m = X.shape[1]
    (Z1, D1, A1, W1, b1, Z2, D2, A2, W2, b2, Z3, A3, W3, b3) = cache
    
    dZ3 = A3 - Y
    dW3 = 1./m * np.dot(dZ3, A2.T)
    db3 = 1./m * np.sum(dZ3, axis=1, keepdims = True)
    dA2 = np.dot(W3.T, dZ3)
    ### START CODE HERE ### (≈ 2 lines of code)
    dA2 = dA2 * D2              # Step 1: Apply mask D2 to shut down the same neurons as during the forward propagation
    dA2 = dA2 / keep_prob              # Step 2: Scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    dZ2 = np.multiply(dA2, np.int64(A2 > 0))
    dW2 = 1./m * np.dot(dZ2, A1.T)
    db2 = 1./m * np.sum(dZ2, axis=1, keepdims = True)
    
    dA1 = np.dot(W2.T, dZ2)
    ### START CODE HERE ### (≈ 2 lines of code)
    dA1 = dA1 * D1              # Step 1: Apply mask D1 to shut down the same neurons as during the forward propagation
    dA1 = dA1 / keep_prob              # Step 2: Scale the value of neurons that haven't been shut down
    ### END CODE HERE ###
    dZ1 = np.multiply(dA1, np.int64(A1 > 0))
    dW1 = 1./m * np.dot(dZ1, X.T)
    db1 = 1./m * np.sum(dZ1, axis=1, keepdims = True)
    
    gradients = {"dZ3": dZ3, "dW3": dW3, "db3": db3,"dA2": dA2,
                 "dZ2": dZ2, "dW2": dW2, "db2": db2, "dA1": dA1, 
                 "dZ1": dZ1, "dW1": dW1, "db1": db1}
    
    return gradients
X_assess, Y_assess, cache = backward_propagation_with_dropout_test_case()

gradients = backward_propagation_with_dropout(X_assess, Y_assess, cache, keep_prob = 0.8)

print ("dA1 = " + str(gradients["dA1"]))
print ("dA2 = " + str(gradients["dA2"]))




Let`s now run the model with dropout (keep_prob = 0.86). It means at every iteration you shut down each neurons of layer 1 and 2 with 14% probability. The function model() will now call:
	- forward_propagation_with_dropout instead of forward_propagation.
	- backward_propagation_with_dropout instead of backward_propagation.

parameters = model(train_X, train_Y, keep_prob = 0.86, learning_rate = 0.3)

print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)
>>>
On the train set:
Accuracy: 0.928909952607
On the test set:
Accuracy: 0.95


Dropout works great! The test accuracy has increased again (to 95%)! Your model is not overfitting the training set and does a great job on the test set. The French football team will be forever grateful to you!

Run the code below to plot the decision boundary.
plt.title("Model with dropout")
axes = plt.gca()
axes.set_xlim([-0.75,0.40])
axes.set_ylim([-0.75,0.65])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)
------------------------------------------------------------------------------------------------------------------------
Note:

A common mistake when using dropout is to use it both in training and testing. You should use dropout (randomly eliminate nodes) only in training.
Deep learning frameworks like tensorflow, PaddlePaddle, keras or caffe come with a dropout layer implementation. Don`t stress - you will soon learn some of these frameworks.

@What you should remember about dropout:
- Dropout is a regularization technique.
- You only use dropout during training. Don`t use dropout (randomly eliminate nodes) during test time.
- Apply dropout both during forward and backward propagation.
- During training time, divide each dropout layer by keep_prob to keep the same expected value for the activations. For example, if keep_prob is 0.5, then we will on average shut down half the nodes, so the output will be scaled by 0.5 since only the remaining half are contributing to the solution. Dividing by 0.5 is equivalent to multiplying by 2. Hence, the output now has the same expected value. You can check that this works even when keep_prob is other values than 0.5.



Conclusions
Here are the results of our three models:

model	train accuracy	test accuracy
3-layer NN without regularization	95%	91.5%
3-layer NN with L2-regularization	94%	93%
3-layer NN with dropout	93%	95%


------------------------------------------------------------------------------------------------------------------------
Conclusions
Here are the results of our three models:

							model	train accuracy	test accuracy
3-layer NN without regularization	95%				91.5%
3-layer NN with L2-regularization	94%				93%
3-layer NN with dropout				93%				95%


Note that regularization hurts training set performance! This is because it limits the ability of the network to overfit to the training set. But since it ultimately gives better test accuracy, it is helping your system.

Congratulations for finishing this assignment! And also for revolutionizing French football. :-)

------------------------------------------------------------------------------------------------------------------------
What we want you to remember from this notebook:
	- Regularization will help you reduce overfitting.
	- Regularization will drive your weights to lower values.
	- L2 regularization and Dropout are two very effective regularization techniques.



*********************************************************************************************
NOTEBOOK: GRADIENT CHECKING
Welcome to the final assignment for this week! In this assignment you will learn to implement and use gradient checking.

You are part of a team working to make mobile payments available globally, and are asked to build a deep learning model to detect fraud--whenever someone makes a payment, you want to see if the payment might be fraudulent, such as if the user`s account has been taken over by a hacker.

But backpropagation is quite challenging to implement, and sometimes has bugs. Because this is a mission-critical application, your company`s CEO wants to be really certain that your implementation of backpropagation is correct. Your CEO says, "Give me a proof that your backpropagation is actually working!" To give this reassurance, you are going to use "gradient checking".

\1) How does gradient checking work?
\2) 1-dimensional gradient checking
\3) N-dimensional gradient checking



------------------------------------------------------------------------------------------------------------------------
\1) How does gradient checking work?
Backpropagation computes the gradients  ∂/∂θ (J) , where  θ denotes the parameters of the model.  J is computed using forward propagation and your loss function.

Because forward propagation is relatively easy to implement, you`re confident you got that right, and so you`re almost 100% sure that you`re computing the cost J correctly. Thus, you can use your code for computing  J to verify the code for computing  ∂/∂θ (J) .

Let`s look back at the definition of a derivative (or gradient):
∂/∂θ (J) = lim   J(θ+ε)−J(θ−ε) / 2ε												...... (1)
		  ε → 0
If you`re not familiar with the " limε→0 " notation, it`s just a way of saying "when  ε  is really really small."

We know the following:
	- ∂/∂θ (J)  is what you want to make sure you`re computing correctly.
	- You can compute  J(θ+ε) and J(θ−ε) (in the case that θ is a real number), since you`re confident your implementation For J is correct.

Lets use equation (1) and a small value for  ε to convince your CEO that your code for computing  ∂/∂θ (J)  is correct!


------------------------------------------------------------------------------------------------------------------------
\2) 1-dimensional gradient checking

Consider a 1D linear function  J(θ)=θx . The model contains only a single real-valued parameter θ , and takes  x  as input.

You will implement code to compute  J(.) and its derivative  ∂/∂θ (J) . You will then use gradient checking to make sure your derivative computation For  J is correct.
"https://raw.githubusercontent.com/Gurubux/DL_Coursera/master/2_Improving_Deep_NN_HyperparamTun_Reg_and_Opt/2_1_Practical_Aspects_Of_Deep_Learning/Gradient_Checking/1D_linear_model.png"

The diagram above shows the key computation steps: 
	- First start with  x 
	- Then evaluate the function J(x)  ("forward propagation"). 
	- Then compute the derivative ∂/∂θ (J)  ("backward propagation").
-----------------------------------------------
-----------------------------------------------
Exercise: implement "forward propagation" and "backward propagation" for this simple function. I.e., compute both  J(.)  ("forward propagation") and its derivative with respect to θ  ("backward propagation"), in two separate functions.

# GRADED FUNCTION: forward_propagation

def forward_propagation(x, theta):
    """
    Implement the linear forward propagation (compute J) presented in Figure 1 (J(theta) = theta * x)
    
    Arguments:
    x -- a real-valued input
    theta -- our parameter, a real number as well
    
    Returns:
    J -- the value of function J, computed using the formula J(theta) = theta * x
    """
    
    ### START CODE HERE ### (approx. 1 line)
    J = theta * x
    ### END CODE HERE ###
    
    return J
x, theta = 2, 4
J = forward_propagation(x, theta)
print ("J = " + str(J))
>>> J = 8

-----------------------------------------------
-----------------------------------------------
Exercise: Now, implement the backward propagation step (derivative computation) of Figure 1. That is, compute the derivative of  J(θ)=θx  with respect to θ . To save you From doing the calculus, you should get  dtheta= ∂/∂θ (J) = x
# GRADED FUNCTION: backward_propagation

def backward_propagation(x, theta):
    """
    Computes the derivative of J with respect to theta (see Figure 1).
    
    Arguments:
    x -- a real-valued input
    theta -- our parameter, a real number as well
    
    Returns:
    dtheta -- the gradient of the cost with respect to theta
    """
    
    ### START CODE HERE ### (approx. 1 line)
    dtheta = x
    ### END CODE HERE ###
    
    return dtheta
x, theta = 2, 4
dtheta = backward_propagation(x, theta)
print ("dtheta = " + str(dtheta))
dtheta = 2

-----------------------------------------------
-----------------------------------------------
Exercise: To show that the backward_propagation() function is correctly computing the gradient  ∂/∂θ (J) , let`s implement gradient checking.

Instructions:

- First compute "gradapprox" using the formula above (1) and a small value of  εε . Here are the Steps to follow:
	1. θ⁺ 		  = θ + ε 
	2. θ⁻ 		  = θ − ε 
	3. J⁺ 		  = J(θ⁺)
	4. J⁻ 		  = J(θ⁻)
	5. gradapprox = ( J⁺ - J⁻ )/ 2ε

- Then compute the gradient using backward propagation, and store the result in a variable "grad"

- Finally, compute the relative difference between "gradapprox" and the "grad" using the following formula:
							∣∣grad−gradapprox∣∣₂
			difference =  ______________________							.......(2)
						∣∣grad∣∣₂ + ∣∣gradapprox∣∣₂
 


You will need 3 Steps to compute this formula:
	1`. compute the numerator using np.linalg.norm(...)
	2`. compute the denominator. You will need to call np.linalg.norm(...) twice.
	3`. divide them.

If this difference is small (say less than  10⁻⁷ ), you can be quite confident that you have computed your gradient correctly. Otherwise, there may be a mistake in the gradient computation.

# GRADED FUNCTION: gradient_check

def gradient_check(x, theta, epsilon = 1e-7):
    """
    Implement the backward propagation presented in Figure 1.
    
    Arguments:
    x -- a real-valued input
    theta -- our parameter, a real number as well
    epsilon -- tiny shift to the input to compute approximated gradient with formula(1)
    
    Returns:
    difference -- difference (2) between the approximated gradient and the backward propagation gradient
    """
    
    # Compute gradapprox using left side of formula (1). epsilon is small enough, you don't need to worry about the limit.
    ### START CODE HERE ### (approx. 5 lines)
    thetaplus = theta + epsilon                               # Step 1
    thetaminus = theta - epsilon                              # Step 2
    J_plus = forward_propagation(x, thetaplus)                # Step 3
    J_minus = forward_propagation(x, thetaminus)              # Step 4
    gradapprox = ( J_plus - J_minus )/ (2 * epsilon)           # Step 5
    ### END CODE HERE ###
    
    # Check if gradapprox is close enough to the output of backward_propagation()
    ### START CODE HERE ### (approx. 1 line)
    grad = backward_propagation(x, theta)
    ### END CODE HERE ###
    
    ### START CODE HERE ### (approx. 1 line)
    numerator = np.linalg.norm(grad - gradapprox)                     # Step 1`
    denominator = np.linalg.norm(grad) + np.linalg.norm(gradapprox)   # Step 2`
    difference = numerator / denominator                              # Step 3`
    ### END CODE HERE ###
    
    if difference < 1e-7:
        print ("The gradient is correct!")
    else:
        print ("The gradient is wrong!")
    
    return difference

x, theta = 2, 4
difference = gradient_check(x, theta)
print("difference = " + str(difference))
------------------------------------------------------------------------------------------------------------------------
\3) N-dimensional gradient checking




*********************************************************************************************
Video: Yoshua Bengio interview

