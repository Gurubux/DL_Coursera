PRACTICAL ASPECTS OF DEEP LEARNING
------------------------------------------------------------------------------------------------------------------------------------------------------------
1.1	Train / Dev / Test sets
Applied ML is an iterative process 
- No. of layers 
- No. of hidden units
- Learning rates
- Activation functions
No easy to guess these hyper parameters from the start, try and figure out(iterative Process)
So data division is important, Training Set / Hold Out CV Set-Dev set / Test set
Earlier or for small number of examples : 100, 1000 or 10,000 having 70/30 or 60/20/20 % was fine.
But, For 1000,000 examples we use 98/1/1 % or 99/0.5/0.5 or rather 99.5/0.4/0.1 that is 10,000 exaples For dev and test sets each is fine.

- Also not having Test set is fine(only dev set)

- It is important to have Dev and test set from same distributions - From web or From users

------------------------------------------------------------------------------------------------------------------------------------------------------------
1.2	Bias / Variance




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.3	Basic Recipe for Machine Learning

Bigger network can reduce Bias and More data can reduce variance and thus there is no trade-off i.e each can be solved with hurting the other, in deep learning, because of the availability of data in Big Data Era. 


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.4	Regularization

L2 Norm in LR
										  
1/m *  np.sum( L(ŷᶦ , yᶦ) ) + λ/2m * ||w||²
	where,
		   			 ₙₓ								
	||w||² = np.sum( wⱼ² )	= w ᵀ w								 
	  			ʲ⁼¹



L2 Norm in NN is also called "Frobenius Norm"
	/------------------------------------------------------------
   /										  L                 /
  / 1/m *  np.sum( L(ŷᶦ , yᶦ) ) + λ/2m *  np.sum( ||w[ˡ]||² )  /
 /										 ˡ⁼¹                  /
/------------------------------------------------------------/
Where,
	  L                    ₙ[L₋₁]   ₙ[L]
  np.sum( ||w[ˡ]||² )  =  np.sum( np.sum(  wᵢⱼ[ᴸ] )²
     ˡ⁼¹                    ᶦ⁼¹    ʲ⁼¹




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.5	Why regularization reduces overfitting?
1. intuition
	λ ↑  W ↓  i.e. W ≈ 0
	Therefore, overfitting (high variance) is moved towards generalization (low variance)
	and thus, a very large λ can cause W ≈ 0 and thus might underfit (high bias)
	So find intermdiate λ

2. intuition
	Z[l] = W[l] a[l-1] + b[l]

	Thus if λ ↑  W[l] ↓  then Z[l] also ↓
	And consider a tanh() activation function, For small range of z the funciton is Linear, thiis less complex is the DNN, this less overfitting


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.6	Dropout Regularization




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.7	Understanding Dropout

Eliminates some units From each layer making complex layers more simpler


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.8	Other regularization methods

Data Augmentation
Early Stopping


------------------------------------------------------------------------------------------------------------------------------------------------------------
1.9	Normalizing inputs

Subtract the mean
divide by the variance-(Normalize the variance)

X = ( X - μ )/ σ²

------------------------------------------------------------------------------------------------------------------------------------------------------------
1.10 Vanishing / Exploding gradients




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.11 Weight Initialization For Deep Networks

Usual practice
 W1 = np.random.randn(n_h,n_x)*0.01

Normalize the weights Initialization

W1 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[0])
W2 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[1])

or

W1 = np.random.randn(n_h,n_x) *  np.sqrt( 1 / n[0])
W2 = np.random.randn(n_h,n_x) *  np.sqrt( 1 / n[1])

or

W1 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[0] + n[1])
W2 = np.random.randn(n_h,n_x) *  np.sqrt( 2 / n[1] + n[2] )

------------------------------------------------------------------------------------------------------------------------------------------------------------
1.12 Numerical approximation of gradients




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.13 Gradient checking




------------------------------------------------------------------------------------------------------------------------------------------------------------
1.14 Gradient Checking Implementation Notes




------------------------------------------------------------------------------------------------------------------------------------------------------------
*********************************************************************************************
NOTEBOOK: INITIALIZATION
\1 - Neural Network model
You will use a 3-layer neural network (already implemented for you). Here are the initialization methods you will experiment with:

Zeros initialization -- setting initialization = "zeros" in the input argument.
Random initialization -- setting initialization = "random" in the input argument. This initializes the weights to large random values.
He initialization -- setting initialization = "he" in the input argument. This initializes the weights to random values scaled according to a paper by He 

def model(X, Y, learning_rate = 0.01, num_iterations = 15000, print_cost = True, initialization = "he"):
    """
    Implements a three-layer neural network: LINEAR->RELU->LINEAR->RELU->LINEAR->SIGMOID.
    
    Arguments:
    X -- input data, of shape (2, number of examples)
    Y -- true "label" vector (containing 0 for red dots; 1 for blue dots), of shape (1, number of examples)
    learning_rate -- learning rate for gradient descent 
    num_iterations -- number of iterations to run gradient descent
    print_cost -- if True, print the cost every 1000 iterations
    initialization -- flag to choose which initialization to use ("zeros","random" or "he")
    
    Returns:
    parameters -- parameters learnt by the model
    """
        
    grads = {}
    costs = [] # to keep track of the loss
    m = X.shape[1] # number of examples
    layers_dims = [X.shape[0], 10, 5, 1]
    
    # Initialize parameters dictionary.
    if initialization == "zeros":
        parameters = initialize_parameters_zeros(layers_dims)
    elif initialization == "random":
        parameters = initialize_parameters_random(layers_dims)
    elif initialization == "he":
        parameters = initialize_parameters_he(layers_dims)

    # Loop (gradient descent)

    for i in range(0, num_iterations):

        # Forward propagation: LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SIGMOID.
        a3, cache = forward_propagation(X, parameters)
        
        # Loss
        cost = compute_loss(a3, Y)

        # Backward propagation.
        grads = backward_propagation(X, Y, cache)
        
        # Update parameters.
        parameters = update_parameters(parameters, grads, learning_rate)
        
        # Print the loss every 1000 iterations
        if print_cost and i % 1000 == 0:
            print("Cost after iteration {}: {}".format(i, cost))
            costs.append(cost)
            
    # plot the loss
    plt.plot(costs)
    plt.ylabel('cost')
    plt.xlabel('iterations (per hundreds)')
    plt.title("Learning rate =" + str(learning_rate))
    plt.show()
    
    return parameters
------------------------------------------------------------------------------------------------
\2 - Zero initialization
\3 - Random initialization
\4 - He initialization
------------------------------------------------------------------------------------------------
\2 - Zero initialization
There are two types of parameters to initialize in a neural network:
	the weight matrices  (W[1],W[2],W[3],...,W[L−1],W[L])
	the bias vectors  (b[1],b[2],b[3],...,b[L−1],b[L])
Exercise: Implement the following function to initialize all parameters to zeros. You`ll see later that this does not work well since it fails to "break symmetry", but lets try it anyway and see what happens. Use np.zeros((..,..)) with the correct shapes.


# GRADED FUNCTION: initialize_parameters_zeros 

def initialize_parameters_zeros(layers_dims):
    """
    Arguments:
    layer_dims -- python array (list) containing the size of each layer.
    
    Returns:
    parameters -- python dictionary containing your parameters "W1", "b1", ..., "WL", "bL":
                    W1 -- weight matrix of shape (layers_dims[1], layers_dims[0])
                    b1 -- bias vector of shape (layers_dims[1], 1)
                    ...
                    WL -- weight matrix of shape (layers_dims[L], layers_dims[L-1])
                    bL -- bias vector of shape (layers_dims[L], 1)
    """
    
    parameters = {}
    L = len(layers_dims)            # number of layers in the network
    
    for l in range(1, L):
        ### START CODE HERE ### (≈ 2 lines of code)
        parameters['W' + str(l)] = np.zeros((layers_dims[l],layers_dims[l-1]))
        parameters['b' + str(l)] = np.zeros((layers_dims[l],1))
        ### END CODE HERE ###
    return parameters
parameters = initialize_parameters_zeros([3,2,1])
print("W1 = " + str(parameters["W1"]))
print("b1 = " + str(parameters["b1"]))
print("W2 = " + str(parameters["W2"]))
print("b2 = " + str(parameters["b2"]))
W1 = [[ 0.  0.  0.]
 [ 0.  0.  0.]]
b1 = [[ 0.]
 [ 0.]]
W2 = [[ 0.  0.]]
b2 = [[ 0.]]


parameters = model(train_X, train_Y, initialization = "zeros")
print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)
>>>
Cost after iteration 0: 0.6931471805599453
Cost after iteration 1000: 0.6931471805599453
Cost after iteration 2000: 0.6931471805599453
Cost after iteration 3000: 0.6931471805599453
Cost after iteration 4000: 0.6931471805599453
Cost after iteration 5000: 0.6931471805599453
Cost after iteration 6000: 0.6931471805599453
Cost after iteration 7000: 0.6931471805599453
Cost after iteration 8000: 0.6931471805599453
Cost after iteration 9000: 0.6931471805599453
Cost after iteration 10000: 0.6931471805599455
Cost after iteration 11000: 0.6931471805599453
Cost after iteration 12000: 0.6931471805599453
Cost after iteration 13000: 0.6931471805599453
Cost after iteration 14000: 0.6931471805599453
>>>
On the train set:
Accuracy: 0.5
On the test set:
Accuracy: 0.5


print ("predictions_train = " + str(predictions_train))
print ("predictions_test = " + str(predictions_test))
>>>
predictions_train = [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0]]
predictions_test = [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]


plt.title("Model with Zeros initialization")
axes = plt.gca()
axes.set_xlim([-1.5,1.5])
axes.set_ylim([-1.5,1.5])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)



The model is predicting 0 for every example.

"In general, initializing all the weights to zero results in the network failing to "BREAK SYMMETRY". This means that every neuron in each layer will learn the same thing, and you might as well be training a neural network with n[l]=1 for every layer, and the network is no more powerful than a linear classifier such as logistic regression."
@What you should remember:
	- The weights  W[l]  should be initialized randomly to break symmetry.
	- It is however okay to initialize the biases  b[l]  to zeros. Symmetry is still broken so long as  W[l] is initialized randomly.  
------------------------------------------------------------------------------------------------
\3 - Random INITIALIZATION
To break symmetry, lets intialize the weights randomly. Following random initialization, each neuron can then proceed to learn a different function of its inputs. In this exercise, you will see what happens if the weights are intialized randomly, but to very large values.

Exercise: Implement the following function to initialize your weights to large random values (scaled by *10) and your biases to zeros. Use np.random.randn(..,..) * 10 for weights and np.zeros((.., ..)) for biases. We are using a fixed np.random.seed(..) to make sure your "random" weights match ours, so don't worry if running several times your code gives you always the same initial values for the parameters.

# GRADED FUNCTION: initialize_parameters_random

def initialize_parameters_random(layers_dims):
    """
    Arguments:
    layer_dims -- python array (list) containing the size of each layer.
    
    Returns:
    parameters -- python dictionary containing your parameters "W1", "b1", ..., "WL", "bL":
                    W1 -- weight matrix of shape (layers_dims[1], layers_dims[0])
                    b1 -- bias vector of shape (layers_dims[1], 1)
                    ...
                    WL -- weight matrix of shape (layers_dims[L], layers_dims[L-1])
                    bL -- bias vector of shape (layers_dims[L], 1)
    """
    
    np.random.seed(3)               # This seed makes sure your "random" numbers will be the as ours
    parameters = {}
    L = len(layers_dims)            # integer representing the number of layers
    
    for l in range(1, L):
        ### START CODE HERE ### (≈ 2 lines of code)
        parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1]) * 10
        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))
        ### END CODE HERE ###

    return parameters

parameters = initialize_parameters_random([3, 2, 1])
print("W1 = " + str(parameters["W1"]))
print("b1 = " + str(parameters["b1"]))
print("W2 = " + str(parameters["W2"]))
print("b2 = " + str(parameters["b2"]))

parameters = model(train_X, train_Y, initialization = "random")
print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)
>>>
Cost after iteration 0: inf
Cost after iteration 1000: 0.6242434241539614
Cost after iteration 2000: 0.5978811277755388
Cost after iteration 3000: 0.5636242569764779
Cost after iteration 4000: 0.5500958254523324
Cost after iteration 5000: 0.544339206192789
Cost after iteration 6000: 0.5373584514307651
Cost after iteration 7000: 0.469574666760224
Cost after iteration 8000: 0.39766324943219844
Cost after iteration 9000: 0.3934423376823982
Cost after iteration 10000: 0.3920158992175907
Cost after iteration 11000: 0.38913979237487845
Cost after iteration 12000: 0.3861261344766218
Cost after iteration 13000: 0.3849694511273874
Cost after iteration 14000: 0.3827489017191917
>>>
On the train set:
Accuracy: 0.83
On the test set:
Accuracy: 0.86

If you see "inf" as the cost after the iteration 0, this is because of numerical roundoff; a more numerically sophisticated implementation would fix this. But this isn`t worth worrying about for our purposes.
Anyway, it looks like you have broken symmetry, and this gives better results. than before. The model is no longer outputting all 0s.

print (predictions_train)
print (predictions_test)

plt.title("Model with large random initialization")
axes = plt.gca()
axes.set_xlim([-1.5,1.5])
axes.set_ylim([-1.5,1.5])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)


OBSERVATIONS:
The cost starts very high. This is because with large random-valued weights, the last activation (sigmoid) outputs results that are very close to 0 or 1 for some examples, and when it gets that example wrong it incurs a very high loss for that example. Indeed, when  
		log(a[3])=log(0) , the loss goes to infinity.

Poor initialization can lead to "VANISHING/EXPLODING GRADIENTS", which also slows down the optimization algorithm.
If you train this network longer you will see better results, but initializing with overly large random numbers slows down the optimization.

@IN SUMMARY:
	- Initializing weights to very large random values does not work well.
	- Hopefully intializing with small random values does better. The important question is: how small should be these random values be? Lets find out in the next part!

------------------------------------------------------------------------------------------------
\4 - He INITIALIZATION

Finally, Try "He Initialization"; this is named For the first author of He et al., 2015. (If you have heard of "Xavier initialization", this is similar except Xavier initialization uses a scaling factor For the weights  W[l]  of 
	sqrt(1./layers_dims[l-1]) 
	where He initialization would use sqrt(2./layers_dims[l-1])

EXERCISE: Implement the following function to initialize your parameters with He initialization.

HINT: This function is similar to the previous initialize_parameters_random(...). The only difference is that instead of multiplying np.random.randn(..,..) by 10, you will multiply it by √ 2/dimension of the previous layer  , which is what He initialization recommends for layers with a ReLU activation.

# GRADED FUNCTION: initialize_parameters_he

def initialize_parameters_he(layers_dims):
    """
    Arguments:
    layer_dims -- python array (list) containing the size of each layer.
    
    Returns:
    parameters -- python dictionary containing your parameters "W1", "b1", ..., "WL", "bL":
                    W1 -- weight matrix of shape (layers_dims[1], layers_dims[0])
                    b1 -- bias vector of shape (layers_dims[1], 1)
                    ...
                    WL -- weight matrix of shape (layers_dims[L], layers_dims[L-1])
                    bL -- bias vector of shape (layers_dims[L], 1)
    """
    
    np.random.seed(3)
    parameters = {}
    L = len(layers_dims) - 1 # integer representing the number of layers
     
    for l in range(1, L + 1):
        ### START CODE HERE ### (≈ 2 lines of code)
        parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1]) * np.sqrt(2/layers_dims[l-1])
        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))
        ### END CODE HERE ###
        
    return parameters

parameters = initialize_parameters_he([2, 4, 1])
print("W1 = " + str(parameters["W1"]))
print("b1 = " + str(parameters["b1"]))
print("W2 = " + str(parameters["W2"]))
print("b2 = " + str(parameters["b2"]))

parameters = model(train_X, train_Y, initialization = "he")
print ("On the train set:")
predictions_train = predict(train_X, train_Y, parameters)
print ("On the test set:")
predictions_test = predict(test_X, test_Y, parameters)
>>>
Cost after iteration 0: 0.8830537463419761
Cost after iteration 1000: 0.6879825919728063
Cost after iteration 2000: 0.6751286264523371
Cost after iteration 3000: 0.6526117768893807
Cost after iteration 4000: 0.6082958970572938
Cost after iteration 5000: 0.5304944491717495
Cost after iteration 6000: 0.4138645817071794
Cost after iteration 7000: 0.3117803464844441
Cost after iteration 8000: 0.23696215330322562
Cost after iteration 9000: 0.18597287209206834
Cost after iteration 10000: 0.15015556280371806
Cost after iteration 11000: 0.12325079292273546
Cost after iteration 12000: 0.09917746546525934
Cost after iteration 13000: 0.08457055954024278
Cost after iteration 14000: 0.07357895962677369

>>>
On the train set:
Accuracy: 0.993333333333
On the test set:
Accuracy: 0.96

plt.title("Model with He initialization")
axes = plt.gca()
axes.set_xlim([-1.5,1.5])
axes.set_ylim([-1.5,1.5])
plot_decision_boundary(lambda x: predict_dec(parameters, x.T), train_X, train_Y)

Observations:

The model with He initialization separates the blue and the red dots very well in a small number of iterations.


\5 - Conclusions
You have seen three different types of initializations. For the same number of iterations and same hyperparameters the comparison is:

Model											Train accuracy		Problem/Comment
3-layer NN with "zeros" initialization			50%					fails to break symmetry
3-layer NN with large "random" initialization	83%					too large weights
3-layer NN with "He" initialization				99%					recommended method


@What you should remember from this notebook:
	- Different initializations lead to different results
	- Random initialization is used to break symmetry and make sure different hidden units can learn different things
	- Don`t intialize to values that are too large
	- "He" initialization works well For networks with ReLU activations.



*********************************************************************************************
NOTEBOOK: REGULARIZATION
By completing this assignment you will:
- Understand that different regularization methods that could help your model.
- Implement dropout and see it work on data.
- Recognize that a model without regularization gives you a better accuracy on the training set but nor necessarily on the test set.
- Understand that you could use both dropout and regularization on your model.










*********************************************************************************************
NOTEBOOK: GRADIENT CHECKING










*********************************************************************************************
Video: Yoshua Bengio interview

